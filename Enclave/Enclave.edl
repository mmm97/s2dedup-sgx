enclave {
    from "sgx_tstdc.edl" import *;
    include "sgx_tseal.h"

    /* 
     * uprint - invokes OCALL to display string buffer inside the enclave.
     *  [in]: copy the string buffer to App outside.
     *  [string]: specifies 'str' is a NULL terminated buffer.
     */
    untrusted {
        void uprint([in, string] const char *str);
        void usgx_exit([in, string] const char *func_name, int err);
        void usgx_exit_error([in, string] const char *error_msg); 


        /* Write sealed key to disk */
        uint32_t save_sdata([in, size=sdata_len] uint8_t *sdata, uint32_t sdata_len);

        /* Read sealed key from dis */
        uint32_t load_sdata([out, size=sdata_len] uint8_t *sdata, uint32_t sdata_len, [out] uint32_t *sdata_len_out);
    };


    trusted {
        public int trusted_encode([in, size=key_size] unsigned char* key, int key_size, [out, size=dest_size] uint8_t *dest, size_t dest_size, [in, size=src_size] uint8_t* src, size_t src_size);
        public int trusted_decode([in, size=key_size] unsigned char* key, int key_size, [out, size=dest_size] uint8_t *dest, size_t dest_size, [in, size=src_size] uint8_t* src, size_t src_size);
        
        public void trusted_init([in, size=key_size] unsigned char* client_key, int key_size, int iv_size, int tag_size, int ops);    


        public int trusted_compute_hash([in, size=data_size] uint8_t *data, size_t data_size, [out, size=digest_size] uint8_t *digest, size_t digest_size);
        public int trusted_reencrypt([out, size=dest_size] uint8_t* dest, size_t dest_size, [in, size=src_size] uint8_t* src, size_t src_size);
        public int trusted_reencrypt_hash_epoch([out, size=dest_size] uint8_t* dest, size_t dest_size, [out, size=digest_size] uint8_t *digest, size_t digest_size, [in, size=src_size] uint8_t* src, size_t src_size);
        public int trusted_decrypt_hash_epoch([out, size=dest_size] uint8_t* dest, size_t dest_size, [out, size=digest_size] uint8_t *digest, size_t digest_size, [in, size=src_size] uint8_t* src, size_t src_size);
        

        public int check_integrity([in, size=plaintext_size]uint8_t* plaintext, size_t plaintext_size, [in, size=ciphertext_size] uint8_t *ciphertext, size_t ciphertext_size);
    };
};
